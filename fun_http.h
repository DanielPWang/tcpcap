#ifndef __FUN_HTTP_H__
#define __FUN_HTTP_H__

#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <fun_all.h>

enum HTTP_SESSION_FLAGS { 
	HTTP_SESSION_IDL, 
	HTTP_SESSION_NEW,
	HTTP_SESSION_WAITONESEC,
	HTTP_SESSION_FINISH,
	HTTP_SESSION_REUSED,
	HTTP_SESSION_RESET,
	HTTP_SESSION_BROKEN,
	HTTP_SESSION_TIMEOUT,
	HTTP_SESSION_UNKNOWN
};

enum { HTTP_QUERY_NONE,
	HTTP_QUERY_GET_POST,
	HTTP_QUERY_OTHER,
	HTTP_RESP_HTTP
};
enum HTTP_TRANSFER_FLAGS { 
	HTTP_TRANSFER_NONE,
	HTTP_TRANSFER_HAVE_CONTENT_LENGTH, 
	HTTP_TRANSFER_CHUNKED,
	HTTP_TRANSFER_OTHER,
	HTTP_TRANSFER_FILE
};

enum HTTP_CONTENT_ENCODING {
	HTTP_CONTENT_ENCODING_NONE,
	HTTP_CONTENT_ENCODING_GZIP,
	HTTP_CONTENT_ENCODING_COMPRESS,
	HTTP_CONTENT_ENCODING_DEFLATE
};

enum HTTP_CONTENT_TYPE { 
	HTTP_CONTENT_NONE,
	HTTP_CONTENT_HTML,
	HTTP_CONTENT_FILE,
	HTTP_CONTENT_JSCRIPT,
	HTTP_CONTENT_IMAGE,
	HTTP_CONTENT_RES,
	HTTP_CONTENT_FILE_PDF,
	HTTP_CONTENT_FILE_KDH,
	HTTP_CONTENT_FILE_CEB,
	HTTP_CONTENT_FILE_CAJ,
	HTTP_CONTENT_FILE_MARC,
	HTTP_CONTENT_FILE_RIS,
	HTTP_CONTENT_FILE_BIB,
	HTTP_CONTENT_FILE_TXT,
	HTTP_CONTENT_FILE_PDG,
	HTTP_CONTENT_FILE_EXCEL,
	HTTP_CONTENT_FILE_RTF,
	HTTP_CONTENT_FILE_OTHER,
	HTTP_CONTENT_STREAM		// maybe
};

enum HTTP_APPEND_STATUS { 
	HTTP_APPEND_FAIL= -1,
	HTTP_APPEND_ADD_PACKET = 0,
	HTTP_APPEND_ADD_PACKET_LATER,
	HTTP_APPEND_FINISH_LATER,
	HTTP_APPEND_FINISH_CURRENT,
	HTTP_APPEND_SUCCESS,
	HTTP_APPEND_REUSE
};

enum HTTP_SESSION_FINISH_TYPE { 
	HTTP_SESSION_FINISH_SUCCESS,
	HTTP_SESSION_FINISH_TIMEOUT,
	HTTP_SESSION_FINISH_CHANNEL_REUSED,
	HTTP_SESSION_FINISH_UNKNOWN_DATA,
	HTTP_SESSION_FINISH_DISORDER_REBUILD_FAILED
};

enum HTTP_SPECIAL_STATE { 
	HTTP_SPECIAL_STATE_TIMEOUT = 900,
	HTTP_SPECIAL_STATE_CHANNEL_REUSED,
	HTTP_SPECIAL_STATE_UNKNOWN_DATA,
	HTTP_SPECIAL_STATE_DISORDER_REBUILD_FAILED
};


// int isHTTP(const char* buffer, const struct iphdr* iphead, const struct tcphdr* tcphead);
int HttpInit();
int HttpStop();
int FilterPacketForHttp(char* buffer, struct iphdr* iphead, struct tcphdr* tcphead);
int LoadHttpConf(const char* filename);
int GetHttpData(char **data);
uint32_t TransGzipData(const char *pGzipData, int nDataLen, char **pTransData, int gz);
int AppendServerToClient(struct http_session* session, const char* pPacket);
int AppendClientToServer(struct http_session* session, const char* pPacket);

#endif

